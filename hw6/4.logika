import org.sireum.logika._

val squared:Z = readInt("Type an int > 1: ")

assume(squared > 1)
var guess:Z = 1
l"""{
    1. guess == 1                   premise
    2. guess > 0                    algebra 1
    3. squared > 1                  premise
    4. squared > guess              algebra 1 3
    5. guess - 1 == 0               algebra 1
    6. (guess - 1) * (guess - 1) < squared  algebra 3 5
}"""

while ( guess * guess < squared){
    l"""{
        invariant (guess-1) * (guess -1) < squared
        modifies guess
    }"""
    guess = guess +1
    l"""{
        1. guess_old * guess_old < squared      premise
        2. guess == guess_old + 1               premise
        3. guess_old == guess - 1               algebra 2
        4. (guess-1) * (guess-1) < squared      subst1 3 1  // second assertion proven
    }"""
}

l"""{
     1. (guess-1) * (guess-1) < squared         premise     // second assertion for while loop carries as a premise
     2. ~(guess * guess < squared)              premise
     3. guess * guess >= squared                algebra 1 2 // first assertion proven via algebra
}"""

assert(guess* guess >= squared )
assert( (guess-1) * (guess -1) < squared)